package it.softfork.xor4s.symmetric.aes

object MixColumns {

  // Galois field (2^8)
  val GF_Mul: Array[Array[Byte]] = Array(
    Array(0x00, 0x00, 0x00, 0x00, 0x00, 0x00),
    Array(0x02, 0x03, 0x09, 0x0b, 0x0d, 0x0e),
    Array(0x04, 0x06, 0x12, 0x16, 0x1a, 0x1c),
    Array(0x06, 0x05, 0x1b, 0x1d, 0x17, 0x12),
    Array(0x08, 0x0c, 0x24, 0x2c, 0x34, 0x38),
    Array(0x0a, 0x0f, 0x2d, 0x27, 0x39, 0x36),
    Array(0x0c, 0x0a, 0x36, 0x3a, 0x2e, 0x24),
    Array(0x0e, 0x09, 0x3f, 0x31, 0x23, 0x2a),
    Array(0x10, 0x18, 0x48, 0x58, 0x68, 0x70),
    Array(0x12, 0x1b, 0x41, 0x53, 0x65, 0x7e),
    Array(0x14, 0x1e, 0x5a, 0x4e, 0x72, 0x6c),
    Array(0x16, 0x1d, 0x53, 0x45, 0x7f, 0x62),
    Array(0x18, 0x14, 0x6c, 0x74, 0x5c, 0x48),
    Array(0x1a, 0x17, 0x65, 0x7f, 0x51, 0x46),
    Array(0x1c, 0x12, 0x7e, 0x62, 0x46, 0x54),
    Array(0x1e, 0x11, 0x77, 0x69, 0x4b, 0x5a),
    Array(0x20, 0x30, 0x90, 0xb0, 0xd0, 0xe0),
    Array(0x22, 0x33, 0x99, 0xbb, 0xdd, 0xee),
    Array(0x24, 0x36, 0x82, 0xa6, 0xca, 0xfc),
    Array(0x26, 0x35, 0x8b, 0xad, 0xc7, 0xf2),
    Array(0x28, 0x3c, 0xb4, 0x9c, 0xe4, 0xd8),
    Array(0x2a, 0x3f, 0xbd, 0x97, 0xe9, 0xd6),
    Array(0x2c, 0x3a, 0xa6, 0x8a, 0xfe, 0xc4),
    Array(0x2e, 0x39, 0xaf, 0x81, 0xf3, 0xca),
    Array(0x30, 0x28, 0xd8, 0xe8, 0xb8, 0x90),
    Array(0x32, 0x2b, 0xd1, 0xe3, 0xb5, 0x9e),
    Array(0x34, 0x2e, 0xca, 0xfe, 0xa2, 0x8c),
    Array(0x36, 0x2d, 0xc3, 0xf5, 0xaf, 0x82),
    Array(0x38, 0x24, 0xfc, 0xc4, 0x8c, 0xa8),
    Array(0x3a, 0x27, 0xf5, 0xcf, 0x81, 0xa6),
    Array(0x3c, 0x22, 0xee, 0xd2, 0x96, 0xb4),
    Array(0x3e, 0x21, 0xe7, 0xd9, 0x9b, 0xba),
    Array(0x40, 0x60, 0x3b, 0x7b, 0xbb, 0xdb),
    Array(0x42, 0x63, 0x32, 0x70, 0xb6, 0xd5),
    Array(0x44, 0x66, 0x29, 0x6d, 0xa1, 0xc7),
    Array(0x46, 0x65, 0x20, 0x66, 0xac, 0xc9),
    Array(0x48, 0x6c, 0x1f, 0x57, 0x8f, 0xe3),
    Array(0x4a, 0x6f, 0x16, 0x5c, 0x82, 0xed),
    Array(0x4c, 0x6a, 0x0d, 0x41, 0x95, 0xff),
    Array(0x4e, 0x69, 0x04, 0x4a, 0x98, 0xf1),
    Array(0x50, 0x78, 0x73, 0x23, 0xd3, 0xab),
    Array(0x52, 0x7b, 0x7a, 0x28, 0xde, 0xa5),
    Array(0x54, 0x7e, 0x61, 0x35, 0xc9, 0xb7),
    Array(0x56, 0x7d, 0x68, 0x3e, 0xc4, 0xb9),
    Array(0x58, 0x74, 0x57, 0x0f, 0xe7, 0x93),
    Array(0x5a, 0x77, 0x5e, 0x04, 0xea, 0x9d),
    Array(0x5c, 0x72, 0x45, 0x19, 0xfd, 0x8f),
    Array(0x5e, 0x71, 0x4c, 0x12, 0xf0, 0x81),
    Array(0x60, 0x50, 0xab, 0xcb, 0x6b, 0x3b),
    Array(0x62, 0x53, 0xa2, 0xc0, 0x66, 0x35),
    Array(0x64, 0x56, 0xb9, 0xdd, 0x71, 0x27),
    Array(0x66, 0x55, 0xb0, 0xd6, 0x7c, 0x29),
    Array(0x68, 0x5c, 0x8f, 0xe7, 0x5f, 0x03),
    Array(0x6a, 0x5f, 0x86, 0xec, 0x52, 0x0d),
    Array(0x6c, 0x5a, 0x9d, 0xf1, 0x45, 0x1f),
    Array(0x6e, 0x59, 0x94, 0xfa, 0x48, 0x11),
    Array(0x70, 0x48, 0xe3, 0x93, 0x03, 0x4b),
    Array(0x72, 0x4b, 0xea, 0x98, 0x0e, 0x45),
    Array(0x74, 0x4e, 0xf1, 0x85, 0x19, 0x57),
    Array(0x76, 0x4d, 0xf8, 0x8e, 0x14, 0x59),
    Array(0x78, 0x44, 0xc7, 0xbf, 0x37, 0x73),
    Array(0x7a, 0x47, 0xce, 0xb4, 0x3a, 0x7d),
    Array(0x7c, 0x42, 0xd5, 0xa9, 0x2d, 0x6f),
    Array(0x7e, 0x41, 0xdc, 0xa2, 0x20, 0x61),
    Array(0x80, 0xc0, 0x76, 0xf6, 0x6d, 0xad),
    Array(0x82, 0xc3, 0x7f, 0xfd, 0x60, 0xa3),
    Array(0x84, 0xc6, 0x64, 0xe0, 0x77, 0xb1),
    Array(0x86, 0xc5, 0x6d, 0xeb, 0x7a, 0xbf),
    Array(0x88, 0xcc, 0x52, 0xda, 0x59, 0x95),
    Array(0x8a, 0xcf, 0x5b, 0xd1, 0x54, 0x9b),
    Array(0x8c, 0xca, 0x40, 0xcc, 0x43, 0x89),
    Array(0x8e, 0xc9, 0x49, 0xc7, 0x4e, 0x87),
    Array(0x90, 0xd8, 0x3e, 0xae, 0x05, 0xdd),
    Array(0x92, 0xdb, 0x37, 0xa5, 0x08, 0xd3),
    Array(0x94, 0xde, 0x2c, 0xb8, 0x1f, 0xc1),
    Array(0x96, 0xdd, 0x25, 0xb3, 0x12, 0xcf),
    Array(0x98, 0xd4, 0x1a, 0x82, 0x31, 0xe5),
    Array(0x9a, 0xd7, 0x13, 0x89, 0x3c, 0xeb),
    Array(0x9c, 0xd2, 0x08, 0x94, 0x2b, 0xf9),
    Array(0x9e, 0xd1, 0x01, 0x9f, 0x26, 0xf7),
    Array(0xa0, 0xf0, 0xe6, 0x46, 0xbd, 0x4d),
    Array(0xa2, 0xf3, 0xef, 0x4d, 0xb0, 0x43),
    Array(0xa4, 0xf6, 0xf4, 0x50, 0xa7, 0x51),
    Array(0xa6, 0xf5, 0xfd, 0x5b, 0xaa, 0x5f),
    Array(0xa8, 0xfc, 0xc2, 0x6a, 0x89, 0x75),
    Array(0xaa, 0xff, 0xcb, 0x61, 0x84, 0x7b),
    Array(0xac, 0xfa, 0xd0, 0x7c, 0x93, 0x69),
    Array(0xae, 0xf9, 0xd9, 0x77, 0x9e, 0x67),
    Array(0xb0, 0xe8, 0xae, 0x1e, 0xd5, 0x3d),
    Array(0xb2, 0xeb, 0xa7, 0x15, 0xd8, 0x33),
    Array(0xb4, 0xee, 0xbc, 0x08, 0xcf, 0x21),
    Array(0xb6, 0xed, 0xb5, 0x03, 0xc2, 0x2f),
    Array(0xb8, 0xe4, 0x8a, 0x32, 0xe1, 0x05),
    Array(0xba, 0xe7, 0x83, 0x39, 0xec, 0x0b),
    Array(0xbc, 0xe2, 0x98, 0x24, 0xfb, 0x19),
    Array(0xbe, 0xe1, 0x91, 0x2f, 0xf6, 0x17),
    Array(0xc0, 0xa0, 0x4d, 0x8d, 0xd6, 0x76),
    Array(0xc2, 0xa3, 0x44, 0x86, 0xdb, 0x78),
    Array(0xc4, 0xa6, 0x5f, 0x9b, 0xcc, 0x6a),
    Array(0xc6, 0xa5, 0x56, 0x90, 0xc1, 0x64),
    Array(0xc8, 0xac, 0x69, 0xa1, 0xe2, 0x4e),
    Array(0xca, 0xaf, 0x60, 0xaa, 0xef, 0x40),
    Array(0xcc, 0xaa, 0x7b, 0xb7, 0xf8, 0x52),
    Array(0xce, 0xa9, 0x72, 0xbc, 0xf5, 0x5c),
    Array(0xd0, 0xb8, 0x05, 0xd5, 0xbe, 0x06),
    Array(0xd2, 0xbb, 0x0c, 0xde, 0xb3, 0x08),
    Array(0xd4, 0xbe, 0x17, 0xc3, 0xa4, 0x1a),
    Array(0xd6, 0xbd, 0x1e, 0xc8, 0xa9, 0x14),
    Array(0xd8, 0xb4, 0x21, 0xf9, 0x8a, 0x3e),
    Array(0xda, 0xb7, 0x28, 0xf2, 0x87, 0x30),
    Array(0xdc, 0xb2, 0x33, 0xef, 0x90, 0x22),
    Array(0xde, 0xb1, 0x3a, 0xe4, 0x9d, 0x2c),
    Array(0xe0, 0x90, 0xdd, 0x3d, 0x06, 0x96),
    Array(0xe2, 0x93, 0xd4, 0x36, 0x0b, 0x98),
    Array(0xe4, 0x96, 0xcf, 0x2b, 0x1c, 0x8a),
    Array(0xe6, 0x95, 0xc6, 0x20, 0x11, 0x84),
    Array(0xe8, 0x9c, 0xf9, 0x11, 0x32, 0xae),
    Array(0xea, 0x9f, 0xf0, 0x1a, 0x3f, 0xa0),
    Array(0xec, 0x9a, 0xeb, 0x07, 0x28, 0xb2),
    Array(0xee, 0x99, 0xe2, 0x0c, 0x25, 0xbc),
    Array(0xf0, 0x88, 0x95, 0x65, 0x6e, 0xe6),
    Array(0xf2, 0x8b, 0x9c, 0x6e, 0x63, 0xe8),
    Array(0xf4, 0x8e, 0x87, 0x73, 0x74, 0xfa),
    Array(0xf6, 0x8d, 0x8e, 0x78, 0x79, 0xf4),
    Array(0xf8, 0x84, 0xb1, 0x49, 0x5a, 0xde),
    Array(0xfa, 0x87, 0xb8, 0x42, 0x57, 0xd0),
    Array(0xfc, 0x82, 0xa3, 0x5f, 0x40, 0xc2),
    Array(0xfe, 0x81, 0xaa, 0x54, 0x4d, 0xcc),
    Array(0x1b, 0x9b, 0xec, 0xf7, 0xda, 0x41),
    Array(0x19, 0x98, 0xe5, 0xfc, 0xd7, 0x4f),
    Array(0x1f, 0x9d, 0xfe, 0xe1, 0xc0, 0x5d),
    Array(0x1d, 0x9e, 0xf7, 0xea, 0xcd, 0x53),
    Array(0x13, 0x97, 0xc8, 0xdb, 0xee, 0x79),
    Array(0x11, 0x94, 0xc1, 0xd0, 0xe3, 0x77),
    Array(0x17, 0x91, 0xda, 0xcd, 0xf4, 0x65),
    Array(0x15, 0x92, 0xd3, 0xc6, 0xf9, 0x6b),
    Array(0x0b, 0x83, 0xa4, 0xaf, 0xb2, 0x31),
    Array(0x09, 0x80, 0xad, 0xa4, 0xbf, 0x3f),
    Array(0x0f, 0x85, 0xb6, 0xb9, 0xa8, 0x2d),
    Array(0x0d, 0x86, 0xbf, 0xb2, 0xa5, 0x23),
    Array(0x03, 0x8f, 0x80, 0x83, 0x86, 0x09),
    Array(0x01, 0x8c, 0x89, 0x88, 0x8b, 0x07),
    Array(0x07, 0x89, 0x92, 0x95, 0x9c, 0x15),
    Array(0x05, 0x8a, 0x9b, 0x9e, 0x91, 0x1b),
    Array(0x3b, 0xab, 0x7c, 0x47, 0x0a, 0xa1),
    Array(0x39, 0xa8, 0x75, 0x4c, 0x07, 0xaf),
    Array(0x3f, 0xad, 0x6e, 0x51, 0x10, 0xbd),
    Array(0x3d, 0xae, 0x67, 0x5a, 0x1d, 0xb3),
    Array(0x33, 0xa7, 0x58, 0x6b, 0x3e, 0x99),
    Array(0x31, 0xa4, 0x51, 0x60, 0x33, 0x97),
    Array(0x37, 0xa1, 0x4a, 0x7d, 0x24, 0x85),
    Array(0x35, 0xa2, 0x43, 0x76, 0x29, 0x8b),
    Array(0x2b, 0xb3, 0x34, 0x1f, 0x62, 0xd1),
    Array(0x29, 0xb0, 0x3d, 0x14, 0x6f, 0xdf),
    Array(0x2f, 0xb5, 0x26, 0x09, 0x78, 0xcd),
    Array(0x2d, 0xb6, 0x2f, 0x02, 0x75, 0xc3),
    Array(0x23, 0xbf, 0x10, 0x33, 0x56, 0xe9),
    Array(0x21, 0xbc, 0x19, 0x38, 0x5b, 0xe7),
    Array(0x27, 0xb9, 0x02, 0x25, 0x4c, 0xf5),
    Array(0x25, 0xba, 0x0b, 0x2e, 0x41, 0xfb),
    Array(0x5b, 0xfb, 0xd7, 0x8c, 0x61, 0x9a),
    Array(0x59, 0xf8, 0xde, 0x87, 0x6c, 0x94),
    Array(0x5f, 0xfd, 0xc5, 0x9a, 0x7b, 0x86),
    Array(0x5d, 0xfe, 0xcc, 0x91, 0x76, 0x88),
    Array(0x53, 0xf7, 0xf3, 0xa0, 0x55, 0xa2),
    Array(0x51, 0xf4, 0xfa, 0xab, 0x58, 0xac),
    Array(0x57, 0xf1, 0xe1, 0xb6, 0x4f, 0xbe),
    Array(0x55, 0xf2, 0xe8, 0xbd, 0x42, 0xb0),
    Array(0x4b, 0xe3, 0x9f, 0xd4, 0x09, 0xea),
    Array(0x49, 0xe0, 0x96, 0xdf, 0x04, 0xe4),
    Array(0x4f, 0xe5, 0x8d, 0xc2, 0x13, 0xf6),
    Array(0x4d, 0xe6, 0x84, 0xc9, 0x1e, 0xf8),
    Array(0x43, 0xef, 0xbb, 0xf8, 0x3d, 0xd2),
    Array(0x41, 0xec, 0xb2, 0xf3, 0x30, 0xdc),
    Array(0x47, 0xe9, 0xa9, 0xee, 0x27, 0xce),
    Array(0x45, 0xea, 0xa0, 0xe5, 0x2a, 0xc0),
    Array(0x7b, 0xcb, 0x47, 0x3c, 0xb1, 0x7a),
    Array(0x79, 0xc8, 0x4e, 0x37, 0xbc, 0x74),
    Array(0x7f, 0xcd, 0x55, 0x2a, 0xab, 0x66),
    Array(0x7d, 0xce, 0x5c, 0x21, 0xa6, 0x68),
    Array(0x73, 0xc7, 0x63, 0x10, 0x85, 0x42),
    Array(0x71, 0xc4, 0x6a, 0x1b, 0x88, 0x4c),
    Array(0x77, 0xc1, 0x71, 0x06, 0x9f, 0x5e),
    Array(0x75, 0xc2, 0x78, 0x0d, 0x92, 0x50),
    Array(0x6b, 0xd3, 0x0f, 0x64, 0xd9, 0x0a),
    Array(0x69, 0xd0, 0x06, 0x6f, 0xd4, 0x04),
    Array(0x6f, 0xd5, 0x1d, 0x72, 0xc3, 0x16),
    Array(0x6d, 0xd6, 0x14, 0x79, 0xce, 0x18),
    Array(0x63, 0xdf, 0x2b, 0x48, 0xed, 0x32),
    Array(0x61, 0xdc, 0x22, 0x43, 0xe0, 0x3c),
    Array(0x67, 0xd9, 0x39, 0x5e, 0xf7, 0x2e),
    Array(0x65, 0xda, 0x30, 0x55, 0xfa, 0x20),
    Array(0x9b, 0x5b, 0x9a, 0x01, 0xb7, 0xec),
    Array(0x99, 0x58, 0x93, 0x0a, 0xba, 0xe2),
    Array(0x9f, 0x5d, 0x88, 0x17, 0xad, 0xf0),
    Array(0x9d, 0x5e, 0x81, 0x1c, 0xa0, 0xfe),
    Array(0x93, 0x57, 0xbe, 0x2d, 0x83, 0xd4),
    Array(0x91, 0x54, 0xb7, 0x26, 0x8e, 0xda),
    Array(0x97, 0x51, 0xac, 0x3b, 0x99, 0xc8),
    Array(0x95, 0x52, 0xa5, 0x30, 0x94, 0xc6),
    Array(0x8b, 0x43, 0xd2, 0x59, 0xdf, 0x9c),
    Array(0x89, 0x40, 0xdb, 0x52, 0xd2, 0x92),
    Array(0x8f, 0x45, 0xc0, 0x4f, 0xc5, 0x80),
    Array(0x8d, 0x46, 0xc9, 0x44, 0xc8, 0x8e),
    Array(0x83, 0x4f, 0xf6, 0x75, 0xeb, 0xa4),
    Array(0x81, 0x4c, 0xff, 0x7e, 0xe6, 0xaa),
    Array(0x87, 0x49, 0xe4, 0x63, 0xf1, 0xb8),
    Array(0x85, 0x4a, 0xed, 0x68, 0xfc, 0xb6),
    Array(0xbb, 0x6b, 0x0a, 0xb1, 0x67, 0x0c),
    Array(0xb9, 0x68, 0x03, 0xba, 0x6a, 0x02),
    Array(0xbf, 0x6d, 0x18, 0xa7, 0x7d, 0x10),
    Array(0xbd, 0x6e, 0x11, 0xac, 0x70, 0x1e),
    Array(0xb3, 0x67, 0x2e, 0x9d, 0x53, 0x34),
    Array(0xb1, 0x64, 0x27, 0x96, 0x5e, 0x3a),
    Array(0xb7, 0x61, 0x3c, 0x8b, 0x49, 0x28),
    Array(0xb5, 0x62, 0x35, 0x80, 0x44, 0x26),
    Array(0xab, 0x73, 0x42, 0xe9, 0x0f, 0x7c),
    Array(0xa9, 0x70, 0x4b, 0xe2, 0x02, 0x72),
    Array(0xaf, 0x75, 0x50, 0xff, 0x15, 0x60),
    Array(0xad, 0x76, 0x59, 0xf4, 0x18, 0x6e),
    Array(0xa3, 0x7f, 0x66, 0xc5, 0x3b, 0x44),
    Array(0xa1, 0x7c, 0x6f, 0xce, 0x36, 0x4a),
    Array(0xa7, 0x79, 0x74, 0xd3, 0x21, 0x58),
    Array(0xa5, 0x7a, 0x7d, 0xd8, 0x2c, 0x56),
    Array(0xdb, 0x3b, 0xa1, 0x7a, 0x0c, 0x37),
    Array(0xd9, 0x38, 0xa8, 0x71, 0x01, 0x39),
    Array(0xdf, 0x3d, 0xb3, 0x6c, 0x16, 0x2b),
    Array(0xdd, 0x3e, 0xba, 0x67, 0x1b, 0x25),
    Array(0xd3, 0x37, 0x85, 0x56, 0x38, 0x0f),
    Array(0xd1, 0x34, 0x8c, 0x5d, 0x35, 0x01),
    Array(0xd7, 0x31, 0x97, 0x40, 0x22, 0x13),
    Array(0xd5, 0x32, 0x9e, 0x4b, 0x2f, 0x1d),
    Array(0xcb, 0x23, 0xe9, 0x22, 0x64, 0x47),
    Array(0xc9, 0x20, 0xe0, 0x29, 0x69, 0x49),
    Array(0xcf, 0x25, 0xfb, 0x34, 0x7e, 0x5b),
    Array(0xcd, 0x26, 0xf2, 0x3f, 0x73, 0x55),
    Array(0xc3, 0x2f, 0xcd, 0x0e, 0x50, 0x7f),
    Array(0xc1, 0x2c, 0xc4, 0x05, 0x5d, 0x71),
    Array(0xc7, 0x29, 0xdf, 0x18, 0x4a, 0x63),
    Array(0xc5, 0x2a, 0xd6, 0x13, 0x47, 0x6d),
    Array(0xfb, 0x0b, 0x31, 0xca, 0xdc, 0xd7),
    Array(0xf9, 0x08, 0x38, 0xc1, 0xd1, 0xd9),
    Array(0xff, 0x0d, 0x23, 0xdc, 0xc6, 0xcb),
    Array(0xfd, 0x0e, 0x2a, 0xd7, 0xcb, 0xc5),
    Array(0xf3, 0x07, 0x15, 0xe6, 0xe8, 0xef),
    Array(0xf1, 0x04, 0x1c, 0xed, 0xe5, 0xe1),
    Array(0xf7, 0x01, 0x07, 0xf0, 0xf2, 0xf3),
    Array(0xf5, 0x02, 0x0e, 0xfb, 0xff, 0xfd),
    Array(0xeb, 0x13, 0x79, 0x92, 0xb4, 0xa7),
    Array(0xe9, 0x10, 0x70, 0x99, 0xb9, 0xa9),
    Array(0xef, 0x15, 0x6b, 0x84, 0xae, 0xbb),
    Array(0xed, 0x16, 0x62, 0x8f, 0xa3, 0xb5),
    Array(0xe3, 0x1f, 0x5d, 0xbe, 0x80, 0x9f),
    Array(0xe1, 0x1c, 0x54, 0xb5, 0x8d, 0x91),
    Array(0xe7, 0x19, 0x4f, 0xa8, 0x9a, 0x83),
    Array(0xe5, 0x1a, 0x46, 0xa3, 0x97, 0x8d)
  ).map(_.map(_.toByte))

  def apply(state: Array[Array[Byte]]): Array[Array[Byte]] = {
    for (i <- 0 to 3) {
      val col = Array(state(0)(i), state(1)(i), state(2)(i), state(3)(i))

      state(0)(i) = GF_Mul(col(0))(0)
      state(0)(i) = (state(0)(i) ^ GF_Mul(col(1))(1)).toByte
      state(0)(i) = (state(0)(i) ^ col(2)).toByte
      state(0)(i) = (state(0)(i) ^ col(3)).toByte

      state(1)(i) = col(0)
      state(1)(i) = (state(1)(i) ^ GF_Mul(col(1))(0)).toByte
      state(1)(i) = (state(1)(i) ^ GF_Mul(col(2))(1)).toByte
      state(1)(i) = (state(1)(i) ^ col(3)).toByte

      state(2)(i) = col(0)
      state(2)(i) = (state(2)(i) ^ col(1)).toByte
      state(2)(i) = (state(2)(i) ^ GF_Mul(col(2))(0)).toByte
      state(2)(i) = (state(2)(i) ^ GF_Mul(col(3))(1)).toByte

      state(3)(i) = GF_Mul(col(0))(1)
      state(3)(i) = (state(3)(i) ^ col(1)).toByte
      state(3)(i) = (state(3)(i) ^ col(2)).toByte
      state(3)(i) = (state(3)(i) ^ GF_Mul(col(3))(0)).toByte
    }

    state
  }

  def inverse(state: Array[Array[Byte]]): Array[Array[Byte]] = {
    for (i <- 0 to 3) {
      val col = Array(state(0)(i), state(1)(i), state(2)(i), state(3)(i))

      state(0)(i) = GF_Mul(col(0))(5)
      state(0)(i) = (state(0)(i) ^ GF_Mul(col(1))(3)).toByte
      state(0)(i) = (state(0)(i) ^ GF_Mul(col(2))(4)).toByte
      state(0)(i) = (state(0)(i) ^ GF_Mul(col(3))(2)).toByte

      state(1)(i) = GF_Mul(col(0))(2)
      state(1)(i) = (state(1)(i) ^ GF_Mul(col(1))(5)).toByte
      state(1)(i) = (state(1)(i) ^ GF_Mul(col(2))(3)).toByte
      state(1)(i) = (state(1)(i) ^ GF_Mul(col(3))(4)).toByte

      state(2)(i) = GF_Mul(col(0))(4)
      state(2)(i) = (state(2)(i) ^ GF_Mul(col(1))(2)).toByte
      state(2)(i) = (state(2)(i) ^ GF_Mul(col(2))(5)).toByte
      state(2)(i) = (state(2)(i) ^ GF_Mul(col(3))(3)).toByte

      state(3)(i) = GF_Mul(col(0))(3)
      state(3)(i) = (state(3)(i) ^ GF_Mul(col(1))(4)).toByte
      state(3)(i) = (state(3)(i) ^ GF_Mul(col(2))(2)).toByte
      state(3)(i) = (state(3)(i) ^ GF_Mul(col(3))(5)).toByte
    }

    state
  }
}
