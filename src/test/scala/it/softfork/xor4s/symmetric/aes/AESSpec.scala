package it.softfork.xor4s.symmetric.aes

import it.softfork.xor4s.Spec

class AESSpec extends Spec {
  "AES.encryptCbc" should "encrypt and decrypt" in {

    val plainText: Array[Byte] = Array(
      0x6b,0xc1,0xbe,0xe2,0x2e,0x40,0x9f,0x96,
      0xe9,0x3d,0x7e,0x11,0x73,0x93,0x17,0x2a,
      0xae,0x2d,0x8a,0x57,0x1e,0x03,0xac,0x9c,
      0x9e,0xb7,0x6f,0xac,0x45,0xaf,0x8e,0x51
    ).map(_.toByte)

    val cipherText: Array[Byte] = Array(
      0xf5,0x8c,0x4c,0x04,0xd6,0xe5,0xf1,0xba,
      0x77,0x9e,0xab,0xfb,0x5f,0x7b,0xfb,0xd6,
      0x9c,0xfc,0x4e,0x96,0x7e,0xdb,0x80,0x8d,
      0x67,0x9f,0x77,0x7b,0xc6,0x70,0x2c,0x7d
    ).map(_.toByte)

    val iv: Array[Byte] = Array(
      0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,
      0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f
    ).map(_.toByte)

    val key: Array[Byte] = Array(
      0x60,0x3d,0xeb,0x10,0x15,0xca,0x71,0xbe,
      0x2b,0x73,0xae,0xf0,0x85,0x7d,0x77,0x81,
      0x1f,0x35,0x2c,0x07,0x3b,0x61,0x08,0xd7,
      0x2d,0x98,0x10,0xa3,0x09,0x14,0xdf,0xf4
    ).map(_.toByte)

    
  }
}